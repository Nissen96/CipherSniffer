#!/usr/bin/env python3

import argparse
import logging
import struct

from itertools import product

# Progress bar wrapper for iterators, initialized to do nothing
tqdm = lambda x, **_: x


# Setup custom logging format
class CustomFormatter(logging.Formatter):
    FORMATS = {
        logging.DEBUG: "\x1b[32;20m%(message)s\x1b[0m",
        logging.INFO: "\x1b[36;20m%(message)s\x1b[0m",
        logging.WARNING: "\x1b[33;20m%(message)s\x1b[0m",
        logging.ERROR: "\x1b[31;20m%(message)s\x1b[0m",
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)

logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
ch.setFormatter(CustomFormatter())
logger.addHandler(ch)

# Constant values used by specific cryptographic methods
CRYPTO_CONSTS = {
    "AES": {
        "Rcon": [
            0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8
        ],
        "S-box": [
            0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76, 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
            0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15, 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
            0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84, 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
            0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8, 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
            0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73, 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
            0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79, 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
            0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A, 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
            0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF, 0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
        ],
        "Reverse S-box": [
            0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
            0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
            0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
            0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
            0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
            0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
            0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
            0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d,
        ],
    },
    "Salsa20 / ChaCha20": {
        "Init": [0x61, 0x70, 0x78, 0x65, 0x33, 0x20, 0x64, 0x6e, 0x79, 0x62, 0x2d, 0x32, 0x6b, 0x20, 0x65, 0x74],
    },
    "Base64": {
        "Char map": [
            0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
            0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66,
            0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76,
            0x77, 0x78, 0x79, 0x7A, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x2B, 0x2F,
        ],
        "Decode map (00)": [
            0x00, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x3F, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
            0x3C, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
            0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x00,
            0x00, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
            0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x00,
        ],
        "Decode map (FF)": [
            0xFF, 0xFF, 0xFF, 0x3E, 0xFF, 0xFF, 0xFF, 0x3F, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
            0x3C, 0x3D, 0xFF, 0xFF, 0xFF, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
            0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0xFF,
            0xFF, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
            0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0xFF,
        ],
    },
    "CRC-32": {
        "Polynomial 1": [0x04, 0xC1, 0x1D, 0xB7],
        "Polynomial 2": [0xDE, 0xBB, 0x20, 0xE3],
        "Generator": [0xED, 0xB8, 0x83, 0x20],
        "Poly Table": [
            0x00, 0x00, 0x00, 0x00, 0x77, 0x07, 0x30, 0x96, 0xEE, 0x0E, 0x61, 0x2C, 0x99, 0x09, 0x51, 0xBA, 0x07, 0x6D, 0xC4, 0x19, 0x70, 0x6A, 0xF4, 0x8F, 0xE9, 0x63, 0xA5, 0x35, 0x9E, 0x64, 0x95, 0xA3,
            0x0E, 0xDB, 0x88, 0x32, 0x79, 0xDC, 0xB8, 0xA4, 0xE0, 0xD5, 0xE9, 0x1E, 0x97, 0xD2, 0xD9, 0x88, 0x09, 0xB6, 0x4C, 0x2B, 0x7E, 0xB1, 0x7C, 0xBD, 0xE7, 0xB8, 0x2D, 0x07, 0x90, 0xBF, 0x1D, 0x91,
            0x1D, 0xB7, 0x10, 0x64, 0x6A, 0xB0, 0x20, 0xF2, 0xF3, 0xB9, 0x71, 0x48, 0x84, 0xBE, 0x41, 0xDE, 0x1A, 0xDA, 0xD4, 0x7D, 0x6D, 0xDD, 0xE4, 0xEB, 0xF4, 0xD4, 0xB5, 0x51, 0x83, 0xD3, 0x85, 0xC7,
            0x13, 0x6C, 0x98, 0x56, 0x64, 0x6B, 0xA8, 0xC0, 0xFD, 0x62, 0xF9, 0x7A, 0x8A, 0x65, 0xC9, 0xEC, 0x14, 0x01, 0x5C, 0x4F, 0x63, 0x06, 0x6C, 0xD9, 0xFA, 0x0F, 0x3D, 0x63, 0x8D, 0x08, 0x0D, 0xF5,
            0x3B, 0x6E, 0x20, 0xC8, 0x4C, 0x69, 0x10, 0x5E, 0xD5, 0x60, 0x41, 0xE4, 0xA2, 0x67, 0x71, 0x72, 0x3C, 0x03, 0xE4, 0xD1, 0x4B, 0x04, 0xD4, 0x47, 0xD2, 0x0D, 0x85, 0xFD, 0xA5, 0x0A, 0xB5, 0x6B,
            0x35, 0xB5, 0xA8, 0xFA, 0x42, 0xB2, 0x98, 0x6C, 0xDB, 0xBB, 0xC9, 0xD6, 0xAC, 0xBC, 0xF9, 0x40, 0x32, 0xD8, 0x6C, 0xE3, 0x45, 0xDF, 0x5C, 0x75, 0xDC, 0xD6, 0x0D, 0xCF, 0xAB, 0xD1, 0x3D, 0x59,
            0x26, 0xD9, 0x30, 0xAC, 0x51, 0xDE, 0x00, 0x3A, 0xC8, 0xD7, 0x51, 0x80, 0xBF, 0xD0, 0x61, 0x16, 0x21, 0xB4, 0xF4, 0xB5, 0x56, 0xB3, 0xC4, 0x23, 0xCF, 0xBA, 0x95, 0x99, 0xB8, 0xBD, 0xA5, 0x0F,
            0x28, 0x02, 0xB8, 0x9E, 0x5F, 0x05, 0x88, 0x08, 0xC6, 0x0C, 0xD9, 0xB2, 0xB1, 0x0B, 0xE9, 0x24, 0x2F, 0x6F, 0x7C, 0x87, 0x58, 0x68, 0x4C, 0x11, 0xC1, 0x61, 0x1D, 0xAB, 0xB6, 0x66, 0x2D, 0x3D,
            0x76, 0xDC, 0x41, 0x90, 0x01, 0xDB, 0x71, 0x06, 0x98, 0xD2, 0x20, 0xBC, 0xEF, 0xD5, 0x10, 0x2A, 0x71, 0xB1, 0x85, 0x89, 0x06, 0xB6, 0xB5, 0x1F, 0x9F, 0xBF, 0xE4, 0xA5, 0xE8, 0xB8, 0xD4, 0x33,
            0x78, 0x07, 0xC9, 0xA2, 0x0F, 0x00, 0xF9, 0x34, 0x96, 0x09, 0xA8, 0x8E, 0xE1, 0x0E, 0x98, 0x18, 0x7F, 0x6A, 0x0D, 0xBB, 0x08, 0x6D, 0x3D, 0x2D, 0x91, 0x64, 0x6C, 0x97, 0xE6, 0x63, 0x5C, 0x01,
            0x6B, 0x6B, 0x51, 0xF4, 0x1C, 0x6C, 0x61, 0x62, 0x85, 0x65, 0x30, 0xD8, 0xF2, 0x62, 0x00, 0x4E, 0x6C, 0x06, 0x95, 0xED, 0x1B, 0x01, 0xA5, 0x7B, 0x82, 0x08, 0xF4, 0xC1, 0xF5, 0x0F, 0xC4, 0x57,
            0x65, 0xB0, 0xD9, 0xC6, 0x12, 0xB7, 0xE9, 0x50, 0x8B, 0xBE, 0xB8, 0xEA, 0xFC, 0xB9, 0x88, 0x7C, 0x62, 0xDD, 0x1D, 0xDF, 0x15, 0xDA, 0x2D, 0x49, 0x8C, 0xD3, 0x7C, 0xF3, 0xFB, 0xD4, 0x4C, 0x65,
            0x4D, 0xB2, 0x61, 0x58, 0x3A, 0xB5, 0x51, 0xCE, 0xA3, 0xBC, 0x00, 0x74, 0xD4, 0xBB, 0x30, 0xE2, 0x4A, 0xDF, 0xA5, 0x41, 0x3D, 0xD8, 0x95, 0xD7, 0xA4, 0xD1, 0xC4, 0x6D, 0xD3, 0xD6, 0xF4, 0xFB,
            0x43, 0x69, 0xE9, 0x6A, 0x34, 0x6E, 0xD9, 0xFC, 0xAD, 0x67, 0x88, 0x46, 0xDA, 0x60, 0xB8, 0xD0, 0x44, 0x04, 0x2D, 0x73, 0x33, 0x03, 0x1D, 0xE5, 0xAA, 0x0A, 0x4C, 0x5F, 0xDD, 0x0D, 0x7C, 0xC9,
            0x50, 0x05, 0x71, 0x3C, 0x27, 0x02, 0x41, 0xAA, 0xBE, 0x0B, 0x10, 0x10, 0xC9, 0x0C, 0x20, 0x86, 0x57, 0x68, 0xB5, 0x25, 0x20, 0x6F, 0x85, 0xB3, 0xB9, 0x66, 0xD4, 0x09, 0xCE, 0x61, 0xE4, 0x9F,
            0x5E, 0xDE, 0xF9, 0x0E, 0x29, 0xD9, 0xC9, 0x98, 0xB0, 0xD0, 0x98, 0x22, 0xC7, 0xD7, 0xA8, 0xB4, 0x59, 0xB3, 0x3D, 0x17, 0x2E, 0xB4, 0x0D, 0x81, 0xB7, 0xBD, 0x5C, 0x3B, 0xC0, 0xBA, 0x6C, 0xAD,
            0xED, 0xB8, 0x83, 0x20, 0x9A, 0xBF, 0xB3, 0xB6, 0x03, 0xB6, 0xE2, 0x0C, 0x74, 0xB1, 0xD2, 0x9A, 0xEA, 0xD5, 0x47, 0x39, 0x9D, 0xD2, 0x77, 0xAF, 0x04, 0xDB, 0x26, 0x15, 0x73, 0xDC, 0x16, 0x83,
            0xE3, 0x63, 0x0B, 0x12, 0x94, 0x64, 0x3B, 0x84, 0x0D, 0x6D, 0x6A, 0x3E, 0x7A, 0x6A, 0x5A, 0xA8, 0xE4, 0x0E, 0xCF, 0x0B, 0x93, 0x09, 0xFF, 0x9D, 0x0A, 0x00, 0xAE, 0x27, 0x7D, 0x07, 0x9E, 0xB1,
            0xF0, 0x0F, 0x93, 0x44, 0x87, 0x08, 0xA3, 0xD2, 0x1E, 0x01, 0xF2, 0x68, 0x69, 0x06, 0xC2, 0xFE, 0xF7, 0x62, 0x57, 0x5D, 0x80, 0x65, 0x67, 0xCB, 0x19, 0x6C, 0x36, 0x71, 0x6E, 0x6B, 0x06, 0xE7,
            0xFE, 0xD4, 0x1B, 0x76, 0x89, 0xD3, 0x2B, 0xE0, 0x10, 0xDA, 0x7A, 0x5A, 0x67, 0xDD, 0x4A, 0xCC, 0xF9, 0xB9, 0xDF, 0x6F, 0x8E, 0xBE, 0xEF, 0xF9, 0x17, 0xB7, 0xBE, 0x43, 0x60, 0xB0, 0x8E, 0xD5,
            0xD6, 0xD6, 0xA3, 0xE8, 0xA1, 0xD1, 0x93, 0x7E, 0x38, 0xD8, 0xC2, 0xC4, 0x4F, 0xDF, 0xF2, 0x52, 0xD1, 0xBB, 0x67, 0xF1, 0xA6, 0xBC, 0x57, 0x67, 0x3F, 0xB5, 0x06, 0xDD, 0x48, 0xB2, 0x36, 0x4B,
            0xD8, 0x0D, 0x2B, 0xDA, 0xAF, 0x0A, 0x1B, 0x4C, 0x36, 0x03, 0x4A, 0xF6, 0x41, 0x04, 0x7A, 0x60, 0xDF, 0x60, 0xEF, 0xC3, 0xA8, 0x67, 0xDF, 0x55, 0x31, 0x6E, 0x8E, 0xEF, 0x46, 0x69, 0xBE, 0x79,
            0xCB, 0x61, 0xB3, 0x8C, 0xBC, 0x66, 0x83, 0x1A, 0x25, 0x6F, 0xD2, 0xA0, 0x52, 0x68, 0xE2, 0x36, 0xCC, 0x0C, 0x77, 0x95, 0xBB, 0x0B, 0x47, 0x03, 0x22, 0x02, 0x16, 0xB9, 0x55, 0x05, 0x26, 0x2F,
            0xC5, 0xBA, 0x3B, 0xBE, 0xB2, 0xBD, 0x0B, 0x28, 0x2B, 0xB4, 0x5A, 0x92, 0x5C, 0xB3, 0x6A, 0x04, 0xC2, 0xD7, 0xFF, 0xA7, 0xB5, 0xD0, 0xCF, 0x31, 0x2C, 0xD9, 0x9E, 0x8B, 0x5B, 0xDE, 0xAE, 0x1D,
            0x9B, 0x64, 0xC2, 0xB0, 0xEC, 0x63, 0xF2, 0x26, 0x75, 0x6A, 0xA3, 0x9C, 0x02, 0x6D, 0x93, 0x0A, 0x9C, 0x09, 0x06, 0xA9, 0xEB, 0x0E, 0x36, 0x3F, 0x72, 0x07, 0x67, 0x85, 0x05, 0x00, 0x57, 0x13,
            0x95, 0xBF, 0x4A, 0x82, 0xE2, 0xB8, 0x7A, 0x14, 0x7B, 0xB1, 0x2B, 0xAE, 0x0C, 0xB6, 0x1B, 0x38, 0x92, 0xD2, 0x8E, 0x9B, 0xE5, 0xD5, 0xBE, 0x0D, 0x7C, 0xDC, 0xEF, 0xB7, 0x0B, 0xDB, 0xDF, 0x21,
            0x86, 0xD3, 0xD2, 0xD4, 0xF1, 0xD4, 0xE2, 0x42, 0x68, 0xDD, 0xB3, 0xF8, 0x1F, 0xDA, 0x83, 0x6E, 0x81, 0xBE, 0x16, 0xCD, 0xF6, 0xB9, 0x26, 0x5B, 0x6F, 0xB0, 0x77, 0xE1, 0x18, 0xB7, 0x47, 0x77,
            0x88, 0x08, 0x5A, 0xE6, 0xFF, 0x0F, 0x6A, 0x70, 0x66, 0x06, 0x3B, 0xCA, 0x11, 0x01, 0x0B, 0x5C, 0x8F, 0x65, 0x9E, 0xFF, 0xF8, 0x62, 0xAE, 0x69, 0x61, 0x6B, 0xFF, 0xD3, 0x16, 0x6C, 0xCF, 0x45,
            0xA0, 0x0A, 0xE2, 0x78, 0xD7, 0x0D, 0xD2, 0xEE, 0x4E, 0x04, 0x83, 0x54, 0x39, 0x03, 0xB3, 0xC2, 0xA7, 0x67, 0x26, 0x61, 0xD0, 0x60, 0x16, 0xF7, 0x49, 0x69, 0x47, 0x4D, 0x3E, 0x6E, 0x77, 0xDB,
            0xAE, 0xD1, 0x6A, 0x4A, 0xD9, 0xD6, 0x5A, 0xDC, 0x40, 0xDF, 0x0B, 0x66, 0x37, 0xD8, 0x3B, 0xF0, 0xA9, 0xBC, 0xAE, 0x53, 0xDE, 0xBB, 0x9E, 0xC5, 0x47, 0xB2, 0xCF, 0x7F, 0x30, 0xB5, 0xFF, 0xE9,
            0xBD, 0xBD, 0xF2, 0x1C, 0xCA, 0xBA, 0xC2, 0x8A, 0x53, 0xB3, 0x93, 0x30, 0x24, 0xB4, 0xA3, 0xA6, 0xBA, 0xD0, 0x36, 0x05, 0xCD, 0xD7, 0x06, 0x93, 0x54, 0xDE, 0x57, 0x29, 0x23, 0xD9, 0x67, 0xBF,
            0xB3, 0x66, 0x7A, 0x2E, 0xC4, 0x61, 0x4A, 0xB8, 0x5D, 0x68, 0x1B, 0x02, 0x2A, 0x6F, 0x2B, 0x94, 0xB4, 0x0B, 0xBE, 0x37, 0xC3, 0x0C, 0x8E, 0xA1, 0x5A, 0x05, 0xDF, 0x1B, 0x2D, 0x02, 0xEF, 0x8D,
        ],
    },
    "MD4 / MD5 / SHA-1": {
        "Init": [0x67, 0x45, 0x23, 0x01, 0xEF, 0xCD, 0xAB, 0x89, 0x98, 0xBA, 0xDC, 0xFE, 0x10, 0x32, 0x54, 0x76],
        "[MD4 / SHA-1] Consts": [0x5a, 0x82, 0x79, 0x99, 0x6e, 0xd9, 0xeb, 0xa1],
        "[SHA-1] Consts": [0x5A, 0x82, 0x79, 0x99, 0x6E, 0xD9, 0xEB, 0xA1, 0x8F, 0x1B, 0xBC, 0xDC, 0xCA, 0x62, 0xC1, 0xD6],
        "[MD5] Consts": [
            0xD7, 0x6A, 0xA4, 0x78, 0xE8, 0xC7, 0xB7, 0x56, 0x24, 0x20, 0x70, 0xDB, 0xC1, 0xBD, 0xCE, 0xEE, 0xF5, 0x7C, 0x0F, 0xAF, 0x47, 0x87, 0xC6, 0x2A, 0xA8, 0x30, 0x46, 0x13, 0xFD, 0x46, 0x95, 0x01,
            0x69, 0x80, 0x98, 0xD8, 0x8B, 0x44, 0xF7, 0xAF, 0xFF, 0xFF, 0x5B, 0xB1, 0x89, 0x5C, 0xD7, 0xBE, 0x6B, 0x90, 0x11, 0x22, 0xFD, 0x98, 0x71, 0x93, 0xA6, 0x79, 0x43, 0x8E, 0x49, 0xB4, 0x08, 0x21,
            0xF6, 0x1E, 0x25, 0x62, 0xC0, 0x40, 0xB3, 0x40, 0x26, 0x5E, 0x5A, 0x51, 0xE9, 0xB6, 0xC7, 0xAA, 0xD6, 0x2F, 0x10, 0x5D, 0x02, 0x44, 0x14, 0x53, 0xD8, 0xA1, 0xE6, 0x81, 0xE7, 0xD3, 0xFB, 0xC8,
            0x21, 0xE1, 0xCD, 0xE6, 0xC3, 0x37, 0x07, 0xD6, 0xF4, 0xD5, 0x0D, 0x87, 0x45, 0x5A, 0x14, 0xED, 0xA9, 0xE3, 0xE9, 0x05, 0xFC, 0xEF, 0xA3, 0xF8, 0x67, 0x6F, 0x02, 0xD9, 0x8D, 0x2A, 0x4C, 0x8A,
            0xFF, 0xFA, 0x39, 0x42, 0x87, 0x71, 0xF6, 0x81, 0x6D, 0x9D, 0x61, 0x22, 0xFD, 0xE5, 0x38, 0x0C, 0xA4, 0xBE, 0xEA, 0x44, 0x4B, 0xDE, 0xCF, 0xA9, 0xF6, 0xBB, 0x4B, 0x60, 0xBE, 0xBF, 0xBC, 0x70,
            0x28, 0x9B, 0x7E, 0xC6, 0xEA, 0xA1, 0x27, 0xFA, 0xD4, 0xEF, 0x30, 0x85, 0x04, 0x88, 0x1D, 0x05, 0xD9, 0xD4, 0xD0, 0x39, 0xE6, 0xDB, 0x99, 0xE5, 0x1F, 0xA2, 0x7C, 0xF8, 0xC4, 0xAC, 0x56, 0x65,
            0xF4, 0x29, 0x22, 0x44, 0x43, 0x2A, 0xFF, 0x97, 0xAB, 0x94, 0x23, 0xA7, 0xFC, 0x93, 0xA0, 0x39, 0x65, 0x5B, 0x59, 0xC3, 0x8F, 0x0C, 0xCC, 0x92, 0xFF, 0xEF, 0xF4, 0x7D, 0x85, 0x84, 0x5D, 0xD1,
            0x6F, 0xA8, 0x7E, 0x4F, 0xFE, 0x2C, 0xE6, 0xE0, 0xA3, 0x01, 0x43, 0x14, 0x4E, 0x08, 0x11, 0xA1, 0xF7, 0x53, 0x7E, 0x82, 0xBD, 0x3A, 0xF2, 0x35, 0x2A, 0xD7, 0xD2, 0xBB, 0xEB, 0x86, 0xD3, 0x91,
        ],
    },
    "SHA-224 / SHA-256": {
        "Round Consts": [
            0x42, 0x8a, 0x2f, 0x98, 0x71, 0x37, 0x44, 0x91, 0xb5, 0xc0, 0xfb, 0xcf, 0xe9, 0xb5, 0xdb, 0xa5, 0x39, 0x56, 0xc2, 0x5b, 0x59, 0xf1, 0x11, 0xf1, 0x92, 0x3f, 0x82, 0xa4, 0xab, 0x1c, 0x5e, 0xd5,
            0xd8, 0x07, 0xaa, 0x98, 0x12, 0x83, 0x5b, 0x01, 0x24, 0x31, 0x85, 0xbe, 0x55, 0x0c, 0x7d, 0xc3, 0x72, 0xbe, 0x5d, 0x74, 0x80, 0xde, 0xb1, 0xfe, 0x9b, 0xdc, 0x06, 0xa7, 0xc1, 0x9b, 0xf1, 0x74,
            0xe4, 0x9b, 0x69, 0xc1, 0xef, 0xbe, 0x47, 0x86, 0x0f, 0xc1, 0x9d, 0xc6, 0x24, 0x0c, 0xa1, 0xcc, 0x2d, 0xe9, 0x2c, 0x6f, 0x4a, 0x74, 0x84, 0xaa, 0x5c, 0xb0, 0xa9, 0xdc, 0x76, 0xf9, 0x88, 0xda,
            0x98, 0x3e, 0x51, 0x52, 0xa8, 0x31, 0xc6, 0x6d, 0xb0, 0x03, 0x27, 0xc8, 0xbf, 0x59, 0x7f, 0xc7, 0xc6, 0xe0, 0x0b, 0xf3, 0xd5, 0xa7, 0x91, 0x47, 0x06, 0xca, 0x63, 0x51, 0x14, 0x29, 0x29, 0x67,
            0x27, 0xb7, 0x0a, 0x85, 0x2e, 0x1b, 0x21, 0x38, 0x4d, 0x2c, 0x6d, 0xfc, 0x53, 0x38, 0x0d, 0x13, 0x65, 0x0a, 0x73, 0x54, 0x76, 0x6a, 0x0a, 0xbb, 0x81, 0xc2, 0xc9, 0x2e, 0x92, 0x72, 0x2c, 0x85,
            0xa2, 0xbf, 0xe8, 0xa1, 0xa8, 0x1a, 0x66, 0x4b, 0xc2, 0x4b, 0x8b, 0x70, 0xc7, 0x6c, 0x51, 0xa3, 0xd1, 0x92, 0xe8, 0x19, 0xd6, 0x99, 0x06, 0x24, 0xf4, 0x0e, 0x35, 0x85, 0x10, 0x6a, 0xa0, 0x70,
            0x19, 0xa4, 0xc1, 0x16, 0x1e, 0x37, 0x6c, 0x08, 0x27, 0x48, 0x77, 0x4c, 0x34, 0xb0, 0xbc, 0xb5, 0x39, 0x1c, 0x0c, 0xb3, 0x4e, 0xd8, 0xaa, 0x4a, 0x5b, 0x9c, 0xca, 0x4f, 0x68, 0x2e, 0x6f, 0xf3,
            0x74, 0x8f, 0x82, 0xee, 0x78, 0xa5, 0x63, 0x6f, 0x84, 0xc8, 0x78, 0x14, 0x8c, 0xc7, 0x02, 0x08, 0x90, 0xbe, 0xff, 0xfa, 0xa4, 0x50, 0x6c, 0xeb, 0xbe, 0xf9, 0xa3, 0xf7, 0xc6, 0x71, 0x78, 0xf2,
        ],
        "[SHA-224] Init": [
            0xc1, 0x05, 0x9e, 0xd8, 0x36, 0x7c, 0xd5, 0x07, 0x30, 0x70, 0xdd, 0x17, 0xf7, 0x0e, 0x59, 0x39,
            0xff, 0xc0, 0x0b, 0x31, 0x68, 0x58, 0x15, 0x11, 0x64, 0xf9, 0x8f, 0xa7, 0xbe, 0xfa, 0x4f, 0xa4,
        ],
        "[SHA-256] Init": [
            0x6A, 0x09, 0xE6, 0x67, 0xBB, 0x67, 0xAE, 0x85, 0x3C, 0x6E, 0xF3, 0x72, 0xA5, 0x4F, 0xF5, 0x3A,
            0x51, 0x0E, 0x52, 0x7F, 0x9B, 0x05, 0x68, 0x8C, 0x1F, 0x83, 0xD9, 0xAB, 0x5B, 0xE0, 0xCD, 0x19,
        ]
    },
    "SHA-384 / SHA-512": {
        "Round Consts": [
            0x42, 0x8a, 0x2f, 0x98, 0xd7, 0x28, 0xae, 0x22, 0x71, 0x37, 0x44, 0x91, 0x23, 0xef, 0x65, 0xcd, 0xb5, 0xc0, 0xfb, 0xcf, 0xec, 0x4d, 0x3b, 0x2f, 0xe9, 0xb5, 0xdb, 0xa5, 0x81, 0x89, 0xdb, 0xbc,
            0x39, 0x56, 0xc2, 0x5b, 0xf3, 0x48, 0xb5, 0x38, 0x59, 0xf1, 0x11, 0xf1, 0xb6, 0x05, 0xd0, 0x19, 0x92, 0x3f, 0x82, 0xa4, 0xaf, 0x19, 0x4f, 0x9b, 0xab, 0x1c, 0x5e, 0xd5, 0xda, 0x6d, 0x81, 0x18,
            0xd8, 0x07, 0xaa, 0x98, 0xa3, 0x03, 0x02, 0x42, 0x12, 0x83, 0x5b, 0x01, 0x45, 0x70, 0x6f, 0xbe, 0x24, 0x31, 0x85, 0xbe, 0x4e, 0xe4, 0xb2, 0x8c, 0x55, 0x0c, 0x7d, 0xc3, 0xd5, 0xff, 0xb4, 0xe2,
            0x72, 0xbe, 0x5d, 0x74, 0xf2, 0x7b, 0x89, 0x6f, 0x80, 0xde, 0xb1, 0xfe, 0x3b, 0x16, 0x96, 0xb1, 0x9b, 0xdc, 0x06, 0xa7, 0x25, 0xc7, 0x12, 0x35, 0xc1, 0x9b, 0xf1, 0x74, 0xcf, 0x69, 0x26, 0x94,
            0xe4, 0x9b, 0x69, 0xc1, 0x9e, 0xf1, 0x4a, 0xd2, 0xef, 0xbe, 0x47, 0x86, 0x38, 0x4f, 0x25, 0xe3, 0x0f, 0xc1, 0x9d, 0xc6, 0x8b, 0x8c, 0xd5, 0xb5, 0x24, 0x0c, 0xa1, 0xcc, 0x77, 0xac, 0x9c, 0x65,
            0x2d, 0xe9, 0x2c, 0x6f, 0x59, 0x2b, 0x02, 0x75, 0x4a, 0x74, 0x84, 0xaa, 0x6e, 0xa6, 0xe4, 0x83, 0x5c, 0xb0, 0xa9, 0xdc, 0xbd, 0x41, 0xfb, 0xd4, 0x76, 0xf9, 0x88, 0xda, 0x83, 0x11, 0x53, 0xb5,
            0x98, 0x3e, 0x51, 0x52, 0xee, 0x66, 0xdf, 0xab, 0xa8, 0x31, 0xc6, 0x6d, 0x2d, 0xb4, 0x32, 0x10, 0xb0, 0x03, 0x27, 0xc8, 0x98, 0xfb, 0x21, 0x3f, 0xbf, 0x59, 0x7f, 0xc7, 0xbe, 0xef, 0x0e, 0xe4,
            0xc6, 0xe0, 0x0b, 0xf3, 0x3d, 0xa8, 0x8f, 0xc2, 0xd5, 0xa7, 0x91, 0x47, 0x93, 0x0a, 0xa7, 0x25, 0x06, 0xca, 0x63, 0x51, 0xe0, 0x03, 0x82, 0x6f, 0x14, 0x29, 0x29, 0x67, 0x0a, 0x0e, 0x6e, 0x70,
            0x27, 0xb7, 0x0a, 0x85, 0x46, 0xd2, 0x2f, 0xfc, 0x2e, 0x1b, 0x21, 0x38, 0x5c, 0x26, 0xc9, 0x26, 0x4d, 0x2c, 0x6d, 0xfc, 0x5a, 0xc4, 0x2a, 0xed, 0x53, 0x38, 0x0d, 0x13, 0x9d, 0x95, 0xb3, 0xdf,
            0x65, 0x0a, 0x73, 0x54, 0x8b, 0xaf, 0x63, 0xde, 0x76, 0x6a, 0x0a, 0xbb, 0x3c, 0x77, 0xb2, 0xa8, 0x81, 0xc2, 0xc9, 0x2e, 0x47, 0xed, 0xae, 0xe6, 0x92, 0x72, 0x2c, 0x85, 0x14, 0x82, 0x35, 0x3b,
            0xa2, 0xbf, 0xe8, 0xa1, 0x4c, 0xf1, 0x03, 0x64, 0xa8, 0x1a, 0x66, 0x4b, 0xbc, 0x42, 0x30, 0x01, 0xc2, 0x4b, 0x8b, 0x70, 0xd0, 0xf8, 0x97, 0x91, 0xc7, 0x6c, 0x51, 0xa3, 0x06, 0x54, 0xbe, 0x30,
            0xd1, 0x92, 0xe8, 0x19, 0xd6, 0xef, 0x52, 0x18, 0xd6, 0x99, 0x06, 0x24, 0x55, 0x65, 0xa9, 0x10, 0xf4, 0x0e, 0x35, 0x85, 0x57, 0x71, 0x20, 0x2a, 0x10, 0x6a, 0xa0, 0x70, 0x32, 0xbb, 0xd1, 0xb8,
            0x19, 0xa4, 0xc1, 0x16, 0xb8, 0xd2, 0xd0, 0xc8, 0x1e, 0x37, 0x6c, 0x08, 0x51, 0x41, 0xab, 0x53, 0x27, 0x48, 0x77, 0x4c, 0xdf, 0x8e, 0xeb, 0x99, 0x34, 0xb0, 0xbc, 0xb5, 0xe1, 0x9b, 0x48, 0xa8,
            0x39, 0x1c, 0x0c, 0xb3, 0xc5, 0xc9, 0x5a, 0x63, 0x4e, 0xd8, 0xaa, 0x4a, 0xe3, 0x41, 0x8a, 0xcb, 0x5b, 0x9c, 0xca, 0x4f, 0x77, 0x63, 0xe3, 0x73, 0x68, 0x2e, 0x6f, 0xf3, 0xd6, 0xb2, 0xb8, 0xa3,
            0x74, 0x8f, 0x82, 0xee, 0x5d, 0xef, 0xb2, 0xfc, 0x78, 0xa5, 0x63, 0x6f, 0x43, 0x17, 0x2f, 0x60, 0x84, 0xc8, 0x78, 0x14, 0xa1, 0xf0, 0xab, 0x72, 0x8c, 0xc7, 0x02, 0x08, 0x1a, 0x64, 0x39, 0xec,
            0x90, 0xbe, 0xff, 0xfa, 0x23, 0x63, 0x1e, 0x28, 0xa4, 0x50, 0x6c, 0xeb, 0xde, 0x82, 0xbd, 0xe9, 0xbe, 0xf9, 0xa3, 0xf7, 0xb2, 0xc6, 0x79, 0x15, 0xc6, 0x71, 0x78, 0xf2, 0xe3, 0x72, 0x53, 0x2b,
            0xca, 0x27, 0x3e, 0xce, 0xea, 0x26, 0x61, 0x9c, 0xd1, 0x86, 0xb8, 0xc7, 0x21, 0xc0, 0xc2, 0x07, 0xea, 0xda, 0x7d, 0xd6, 0xcd, 0xe0, 0xeb, 0x1e, 0xf5, 0x7d, 0x4f, 0x7f, 0xee, 0x6e, 0xd1, 0x78,
            0x06, 0xf0, 0x67, 0xaa, 0x72, 0x17, 0x6f, 0xba, 0x0a, 0x63, 0x7d, 0xc5, 0xa2, 0xc8, 0x98, 0xa6, 0x11, 0x3f, 0x98, 0x04, 0xbe, 0xf9, 0x0d, 0xae, 0x1b, 0x71, 0x0b, 0x35, 0x13, 0x1c, 0x47, 0x1b,
            0x28, 0xdb, 0x77, 0xf5, 0x23, 0x04, 0x7d, 0x84, 0x32, 0xca, 0xab, 0x7b, 0x40, 0xc7, 0x24, 0x93, 0x3c, 0x9e, 0xbe, 0x0a, 0x15, 0xc9, 0xbe, 0xbc, 0x43, 0x1d, 0x67, 0xc4, 0x9c, 0x10, 0x0d, 0x4c,
            0x4c, 0xc5, 0xd4, 0xbe, 0xcb, 0x3e, 0x42, 0xb6, 0x59, 0x7f, 0x29, 0x9c, 0xfc, 0x65, 0x7e, 0x2a, 0x5f, 0xcb, 0x6f, 0xab, 0x3a, 0xd6, 0xfa, 0xec, 0x6c, 0x44, 0x19, 0x8c, 0x4a, 0x47, 0x58, 0x17,
        ],
        "[SHA-384] Init": [
            0xcb, 0xbb, 0x9d, 0x5d, 0xc1, 0x05, 0x9e, 0xd8, 0x62, 0x9a, 0x29, 0x2a, 0x36, 0x7c, 0xd5, 0x07,
            0x91, 0x59, 0x01, 0x5a, 0x30, 0x70, 0xdd, 0x17, 0x15, 0x2f, 0xec, 0xd8, 0xf7, 0x0e, 0x59, 0x39,
            0x67, 0x33, 0x26, 0x67, 0xff, 0xc0, 0x0b, 0x31, 0x8e, 0xb4, 0x4a, 0x87, 0x68, 0x58, 0x15, 0x11,
            0xdb, 0x0c, 0x2e, 0x0d, 0x64, 0xf9, 0x8f, 0xa7, 0x47, 0xb5, 0x48, 0x1d, 0xbe, 0xfa, 0x4f, 0xa4,
        ],
        "[SHA-512] Init": [
            0x6a, 0x09, 0xe6, 0x67, 0xf3, 0xbc, 0xc9, 0x08, 0xbb, 0x67, 0xae, 0x85, 0x84, 0xca, 0xa7, 0x3b,
            0x3c, 0x6e, 0xf3, 0x72, 0xfe, 0x94, 0xf8, 0x2b, 0xa5, 0x4f, 0xf5, 0x3a, 0x5f, 0x1d, 0x36, 0xf1,
            0x51, 0x0e, 0x52, 0x7f, 0xad, 0xe6, 0x82, 0xd1, 0x9b, 0x05, 0x68, 0x8c, 0x2b, 0x3e, 0x6c, 0x1f,
            0x1f, 0x83, 0xd9, 0xab, 0xfb, 0x41, 0xbd, 0x6b, 0x5b, 0xe0, 0xcd, 0x19, 0x13, 0x7e, 0x21, 0x79,
        ],
    },
    "TEA / XTEA / XXTEA": {
        "Delta": [0x9E, 0x37, 0x79, 0xB9],
        "[TEA] Sum": [0xC6, 0xEF, 0x37, 0x20],
    },
    "ZipCrypto": {
        "Keys": [0x12, 0x34, 0x56, 0x78, 0x23, 0x45, 0x67, 0x89, 0x34, 0x56, 0x78, 0x90],
        "LCG a": [0x08, 0x08, 0x84, 0x05],
    },
    "FNV": {
        "Prime": [0x01, 0x00, 0x01, 0x93],
        "Offset": [0x81, 0x1c, 0x9d, 0xc5],
    },
    "Whirlpool": {
        "S-box": [
            0xE8, 0xC6, 0x23, 0x18, 0x4F, 0x01, 0xB8, 0x87, 0xF5, 0xD2, 0xA6, 0x36, 0x52, 0x91, 0x6F, 0x79, 0x8E, 0x9B, 0xBC, 0x60, 0x35, 0x7B, 0x0C, 0xA3, 0xC2, 0xD7, 0xE0, 0x1D, 0x57, 0xFE, 0x4B, 0x2E,
            0xE5, 0x37, 0x77, 0x15, 0xDA, 0x4A, 0xF0, 0x9F, 0x0A, 0x29, 0xC9, 0x58, 0x85, 0x6B, 0xA0, 0xB1, 0xF4, 0x10, 0x5D, 0xBD, 0x67, 0x05, 0x3E, 0xCB, 0x8B, 0x41, 0x27, 0xE4, 0xD8, 0x95, 0x7D, 0xA7,
            0x66, 0x7C, 0xEE, 0xFB, 0x9E, 0x47, 0x17, 0xDD, 0x07, 0xBF, 0x2D, 0xCA, 0x33, 0x83, 0x5A, 0xAD, 0x71, 0xAA, 0x02, 0x63, 0xD9, 0x49, 0x19, 0xC8, 0x88, 0x5B, 0xE3, 0xF2, 0xB0, 0x32, 0x26, 0x9A,
            0x80, 0xD5, 0x0F, 0xE9, 0x48, 0x34, 0xCD, 0xBE, 0x5F, 0x90, 0x7A, 0xFF, 0xAE, 0x1A, 0x68, 0x20, 0x22, 0x93, 0x54, 0xB4, 0x12, 0x73, 0xF1, 0x64, 0xEC, 0xC3, 0x08, 0x40, 0x3D, 0x8D, 0xA1, 0xDB,
            0x2B, 0xCF, 0x00, 0x97, 0x1B, 0xD6, 0x82, 0x76, 0x50, 0x6A, 0xAF, 0xB5, 0xEF, 0x30, 0xF3, 0x45, 0xEA, 0xA2, 0x55, 0x3F, 0xC0, 0x2F, 0xBA, 0x65, 0x4D, 0xFD, 0x1C, 0xDE, 0x8A, 0x06, 0x75, 0x92,
            0x1F, 0x0E, 0xE6, 0xB2, 0x96, 0xA8, 0xD4, 0x62, 0x59, 0x25, 0xC5, 0xF9, 0x4C, 0x39, 0x72, 0x84, 0x8C, 0x38, 0x78, 0x5E, 0x61, 0xE2, 0xA5, 0xD1, 0x1E, 0x9C, 0x21, 0xB3, 0x04, 0xFC, 0xC7, 0x43,
            0x0D, 0x6D, 0x99, 0x51, 0x24, 0x7E, 0xDF, 0xFA, 0x11, 0xCE, 0xAB, 0x3B, 0xEB, 0xB7, 0x4E, 0x8F, 0xF7, 0x94, 0x81, 0x3C, 0xD3, 0x2C, 0x13, 0xB9, 0x03, 0xC4, 0x6E, 0xE7, 0xA9, 0x7F, 0x44, 0x56,
            0x53, 0xC1, 0xBB, 0x2A, 0x6C, 0x9D, 0x0B, 0xDC, 0x46, 0xF6, 0x74, 0x31, 0xE1, 0x14, 0x89, 0xAC, 0x09, 0x69, 0x3A, 0x16, 0xED, 0xD0, 0xB6, 0x70, 0xA4, 0x98, 0x42, 0xCC, 0x86, 0xF8, 0x5C, 0x28,
        ],
    },
    "LCG params": {
        "C/C++": [0x41, 0xc6, 0x4e, 0x6d],
        "Delphi/Pascal": [0x08, 0x08, 0x84, 0x05],
        "VBA": [0x00, 0xfd, 0x43, 0xfd],
    }
}


def find_constants(
        data: bytes,
        indicator: str,
        sequence: list[int],
        chunk_size: int,
        endian: str,
        reverse: bool=False,
        max_dist: int=256,
):
    format = "<" if endian == "LE" else ">"
    format += {1: "B", 2: "H", 4: "I", 8: "Q"}[chunk_size]

    # Split in chunks based on chunk lengths
    chunks = [
        int.from_bytes(bytes(sequence[i:i + chunk_size]))
        for i in range(0, len(sequence), chunk_size)
    ]

    if reverse:
        chunks = chunks[::-1]

    # Identify nonzero chunks and their indices
    # These should not be searched for initially, as this is highly inefficient
    # due to most binaries containing a large number of null bytes
    nonzero_indices = [i for i, c in enumerate(chunks) if c != 0]
    nonzero_chunks = [chunks[i] for i in nonzero_indices]

    positions = {c: [] for c in nonzero_chunks}

    # Step 1: Scan binary for nonzero chunks
    for i in tqdm(
        range(len(data) - chunk_size + 1),
        leave=False,
        desc=f"  {indicator} <{chunk_size}-byte {endian}{' (R)' if reverse else ''}>"
    ):
        val = struct.unpack(format, data[i:i + chunk_size])[0]
        if val in positions:
            positions[val].append(i)

    # Step 2: Find best sequence of nonzero chunks
    best_seq = []
    best_span = None

    for p0 in positions[nonzero_chunks[0]]:
        seq = [p0]
        last = p0
        for idx in range(1, len(nonzero_chunks)):
            next_pos = next((p for p in positions[nonzero_chunks[idx]] if p > last), None)

            # No further matches possible
            if next_pos is None:
                break

            # Max distance exceeded
            n_zeros_between = nonzero_indices[idx] - nonzero_indices[idx-1] - 1
            allowed_span = (n_zeros_between + 1) * max_dist
            if next_pos - last > allowed_span:
                break

            seq.append(next_pos)
            last = next_pos

        # Better sequence = longer or as long with a shorter span
        span = seq[-1] - seq[0] if len(seq) > 1 else 0
        if (
            len(seq) > len(best_seq) or
            (len(seq) == len(best_seq) and (best_span is None or span < best_span))
        ):
            best_seq = seq
            best_span = span

    if not best_seq:
        return None, 0, False, chunk_size, endian, reverse

    def verify_zeros(indices, offset, direction=1):
        verified = []
        last_offset = offset
        for ei in indices:
            expected_chunk = chunks[ei]
            if expected_chunk != 0:
                break
            if 0 <= offset < len(data) - chunk_size + 1:
                actual = struct.unpack(format, data[offset:offset + chunk_size])[0]
                if actual == 0:
                    verified.append((ei, offset))
                else:
                    break
            else:
                break
            next_offset = offset + direction * chunk_size

            if abs(next_offset - last_offset) > max_dist:
                break
            last_offset = offset
            offset = next_offset
        return verified

    # Step 3: Verify zero-chunks (skipped in initial search)
    verified_chunks = []  # (chunk_idx, offset)
    seq_iter = iter(zip(nonzero_indices, best_seq))
    idx0, pos0 = next(seq_iter)

    # Leading zeros
    if idx0 > 0:
        verified_chunks += verify_zeros(
            range(idx0 - 1, -1, -1),
            pos0 - chunk_size,
            direction=-1
        )

    # First nonzero chunk
    verified_chunks.append((idx0, pos0))

    # Gap zeros
    for idx1, pos1 in seq_iter:
        verified_chunks += verify_zeros(
            range(idx0 + 1, idx1),
            pos0 + chunk_size
        )
        verified_chunks.append((idx1, pos1))

        # In-between nonzero chunks
        idx0, pos0 = idx1, pos1

    # Trailing zeros
    if idx0 < len(chunks) - 1:
        verified_chunks += verify_zeros(
            range(idx0 + 1, len(chunks)),
            pos0 + chunk_size
        )

    # Deduplicate and sort by offset
    verified_chunks = sorted(set(verified_chunks), key=lambda x: x[1])

    # Compute matched size based on verified chunks
    matched_size = len(verified_chunks) * chunk_size

    # True start offset: smallest verified offset
    start_offset = min(verified_chunks, key=lambda x: x[1])[1]

    # Checks fragmentation - chunks close together are considered consecutive
    # even with small gaps to account for padding, instructions etc. in between
    consecutive = all(
        verified_chunks[i + 1][1] - verified_chunks[i][1] <= 4 * chunk_size
        for i in range(len(verified_chunks) -1)
    )

    return start_offset, matched_size, consecutive, chunk_size, endian, reverse


def find_longest_match(
        data: bytes,
        indicator: str,
        sequence: list[int],
        min_chunk_size: int=2,
) -> tuple[int, bool, str, bool]:
    chunk_sizes = [s for s in (8, 4, 2, 1) if s >= min_chunk_size]

    # Find matches in little- and big-endian, in normal and reverse order for various chunk sizes
    matches = []
    for chunk_size, endian, reverse in product(chunk_sizes, ("BE", "LE"), (False, True)):
        # Ensure sequence can be chunked cleanly
        if len(sequence) % chunk_size != 0:
            continue

        # Exact same as looking be BE non-reversed, independent of chunk size
        if endian == "LE" and reverse:
            continue

        # Don't consider endianness for single byte
        if chunk_size == 1 and endian == "LE":
            continue

        match = find_constants(data, indicator, sequence, chunk_size, endian, reverse)

        # If a consecutive, full match is found, stop early
        if match[1] == len(sequence) and match[2]:
            return match

        matches.append(match)

    if len(matches) == 0:
        return None, 0, False, 0, None, None

    # Prioritize longest match highest, then consecutiveness
    longest = max(matches, key=lambda x: x[1])
    long_candidates = [m for m in matches if m[1] == longest[1]]
    for match in long_candidates:
        if match[2]:  # Consecutive
            return match

    # In case of no consecutiveness, just return the first longest
    return long_candidates[0]


def detect_algorithms(data: bytes, filters: list[str], min_chunk_size: int):
    # For each chosen algorithm, detect its presence by finding indicator sequences
    for algo, indicators in CRYPTO_CONSTS.items():
        if all(filter.strip() not in algo.lower() for filter in filters):
            continue

        logging.info(f"[{algo}]")
        for indicator, sequence in indicators.items():
            offset, found, consecutive, chunk_size, endian, reverse = find_longest_match(data, indicator, sequence, min_chunk_size)

            n = len(sequence)
            format = f"  {indicator} ({found}/{n})"
            if offset is not None:
                format += f": offset {hex(offset)} ({offset})\n"
                e = "little-endian" if endian == "LE" else "big-endian"
                format += f"    <{chunk_size}-byte chunks, {e}"
                if reverse:
                    format += ", reverse order"
                if not consecutive:
                    format += ", fragmented"
                format += ">"
            format += "\n"

            if found == n and (consecutive or chunk_size > 2):
                logging.debug(format)
            elif (
                (chunk_size == 1 and found == 4 and consecutive) or
                (chunk_size == 1 and found > 4) or
                (chunk_size == 2 and found > 2) or
                (chunk_size > 2 and found > 0)
            ):
                logging.warning(format)
            else:
                logging.error(format)


def list_supported_algorithms():
    logging.info("Supported algorithms:")
    for entry in CRYPTO_CONSTS:
        for algo in entry.split("/"):
            logging.debug(f"  {algo.strip()}")


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Detect cryptographic algorithms in binary data")
    parser.add_argument("file", nargs="?", type=argparse.FileType("rb"), help="Binary data file")
    parser.add_argument("-p", "--progress", action="store_true", help="Show progress bars")
    parser.add_argument("-f", "--filter", default="", help="Algorithm(s) to detect, e.g. 'cha,md,zip'")
    parser.add_argument("-l", "--list", action="store_true", help="List supported algorithms")
    parser.add_argument("-m", "--min-chunk-size", type=int, default=4, help="Minimum chunk size to split constants in (default: %(default)s)")
    return parser.parse_args()


def main():
    args = parse_args()

    if args.list:
        list_supported_algorithms()
        return

    if args.file is None:
        logging.error("[!] Input file is required!")
        return

    # Update trange function to use tqdm for automatic progress bar
    if args.progress:
        global tqdm
        try:
            from tqdm import tqdm
        except ImportError:
            logging.error("[!] For progress bar support, please install 'tqdm' with pip\n")

    filters = args.filter.lower().split(",")
    with args.file as f:
        data = f.read()

    detect_algorithms(data, filters, args.min_chunk_size)


if __name__ == "__main__":
    main()
